# -*- coding: utf-8 -*-
"""app.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1B_m6cvBXJCJ8XHsdxP9GlAcfm72r1VQu
"""

import streamlit as st
import pandas as pd
import numpy as np
import pickle
from sklearn.datasets import load_iris
import matplotlib.pyplot as plt
import seaborn as sns

# Load model and data
model = joblib.load('naive_bayes_model.pkl')
iris = load_iris()


# Sidebar for navigation
st.sidebar.title("Iris Classifier App")
page = st.sidebar.radio("Navigate", ["Data Description", "Prediction", "Visualization"])

# Page 1: Data Description
if page == "Data Description":
    st.title("üîç Iris Dataset Description")
    st.markdown("The Iris dataset contains 150 samples of iris flowers, with 4 features:")
    st.write("- Sepal Length")
    st.write("- Sepal Width")
    st.write("- Petal Length")
    st.write("- Petal Width")
    st.write("There are 3 species: Setosa, Versicolor, and Virginica.")

    st.dataframe(df.head())

    st.subheader("Summary Statistics")
    st.write(df.describe())

# Page 2: Prediction
elif page == "Prediction":
    st.title("üå∏ Iris Flower Prediction")

    st.write("Enter the measurements of the iris flower:")

    sepal_length = st.slider("Sepal Length (cm)", 4.0, 8.0, 5.8)
    sepal_width = st.slider("Sepal Width (cm)", 2.0, 4.5, 3.0)
    petal_length = st.slider("Petal Length (cm)", 1.0, 7.0, 4.0)
    petal_width = st.slider("Petal Width (cm)", 0.1, 2.5, 1.2)

    if st.button("Predict"):
        input_data = np.array([[sepal_length, sepal_width, petal_length, petal_width]])
        prediction = model.predict(input_data)[0]
        predicted_class = target_names[prediction]
        st.success(f"The predicted class is **{predicted_class}** üåº")

# Page 3: Visualization
elif page == "Visualization":
    st.title("üìä Data Visualization")

    st.subheader("Pairplot of the Iris Dataset")
    df_plot = df.copy()
    df_plot['species'] = df_plot['target'].apply(lambda x: target_names[x])
    sns.set(style="whitegrid")
    fig = sns.pairplot(df_plot, hue="species", diag_kind="kde")
    st.pyplot(fig)